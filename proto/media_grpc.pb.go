// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	GetHeadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileHeader, error)
	GetObjectByRange(ctx context.Context, in *FilePartInput, opts ...grpc.CallOption) (*FilePartObject, error)
	GetPresignedUrlDownloadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileDownloadUrl, error)
	GetPresignedUrlDownloadPartFile(ctx context.Context, in *LargeFileInput, opts ...grpc.CallOption) (*LargeFileResponse, error)
	GetPresignedUrlUploadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileUploadUrl, error)
	GetPresignedUrlUploadLargeFile(ctx context.Context, in *LargeFileInput, opts ...grpc.CallOption) (*LargeFileResponse, error)
	CompleteMultipartUpload(ctx context.Context, in *UploadCompleteInput, opts ...grpc.CallOption) (*UploadCompleteResponse, error)
	AbortMultipartUpload(ctx context.Context, in *UploadCompleteInput, opts ...grpc.CallOption) (*UploadCompleteResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) GetHeadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileHeader, error) {
	out := new(FileHeader)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetHeadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetObjectByRange(ctx context.Context, in *FilePartInput, opts ...grpc.CallOption) (*FilePartObject, error) {
	out := new(FilePartObject)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetObjectByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetPresignedUrlDownloadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileDownloadUrl, error) {
	out := new(FileDownloadUrl)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetPresignedUrlDownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetPresignedUrlDownloadPartFile(ctx context.Context, in *LargeFileInput, opts ...grpc.CallOption) (*LargeFileResponse, error) {
	out := new(LargeFileResponse)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetPresignedUrlDownloadPartFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetPresignedUrlUploadFile(ctx context.Context, in *FileInput, opts ...grpc.CallOption) (*FileUploadUrl, error) {
	out := new(FileUploadUrl)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetPresignedUrlUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetPresignedUrlUploadLargeFile(ctx context.Context, in *LargeFileInput, opts ...grpc.CallOption) (*LargeFileResponse, error) {
	out := new(LargeFileResponse)
	err := c.cc.Invoke(ctx, "/proto.MediaService/GetPresignedUrlUploadLargeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CompleteMultipartUpload(ctx context.Context, in *UploadCompleteInput, opts ...grpc.CallOption) (*UploadCompleteResponse, error) {
	out := new(UploadCompleteResponse)
	err := c.cc.Invoke(ctx, "/proto.MediaService/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) AbortMultipartUpload(ctx context.Context, in *UploadCompleteInput, opts ...grpc.CallOption) (*UploadCompleteResponse, error) {
	out := new(UploadCompleteResponse)
	err := c.cc.Invoke(ctx, "/proto.MediaService/AbortMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility
type MediaServiceServer interface {
	GetHeadFile(context.Context, *FileInput) (*FileHeader, error)
	GetObjectByRange(context.Context, *FilePartInput) (*FilePartObject, error)
	GetPresignedUrlDownloadFile(context.Context, *FileInput) (*FileDownloadUrl, error)
	GetPresignedUrlDownloadPartFile(context.Context, *LargeFileInput) (*LargeFileResponse, error)
	GetPresignedUrlUploadFile(context.Context, *FileInput) (*FileUploadUrl, error)
	GetPresignedUrlUploadLargeFile(context.Context, *LargeFileInput) (*LargeFileResponse, error)
	CompleteMultipartUpload(context.Context, *UploadCompleteInput) (*UploadCompleteResponse, error)
	AbortMultipartUpload(context.Context, *UploadCompleteInput) (*UploadCompleteResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaServiceServer struct {
}

func (UnimplementedMediaServiceServer) GetHeadFile(context.Context, *FileInput) (*FileHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadFile not implemented")
}
func (UnimplementedMediaServiceServer) GetObjectByRange(context.Context, *FilePartInput) (*FilePartObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectByRange not implemented")
}
func (UnimplementedMediaServiceServer) GetPresignedUrlDownloadFile(context.Context, *FileInput) (*FileDownloadUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedUrlDownloadFile not implemented")
}
func (UnimplementedMediaServiceServer) GetPresignedUrlDownloadPartFile(context.Context, *LargeFileInput) (*LargeFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedUrlDownloadPartFile not implemented")
}
func (UnimplementedMediaServiceServer) GetPresignedUrlUploadFile(context.Context, *FileInput) (*FileUploadUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedUrlUploadFile not implemented")
}
func (UnimplementedMediaServiceServer) GetPresignedUrlUploadLargeFile(context.Context, *LargeFileInput) (*LargeFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedUrlUploadLargeFile not implemented")
}
func (UnimplementedMediaServiceServer) CompleteMultipartUpload(context.Context, *UploadCompleteInput) (*UploadCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedMediaServiceServer) AbortMultipartUpload(context.Context, *UploadCompleteInput) (*UploadCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_GetHeadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetHeadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetHeadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetHeadFile(ctx, req.(*FileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetObjectByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetObjectByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetObjectByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetObjectByRange(ctx, req.(*FilePartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetPresignedUrlDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetPresignedUrlDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetPresignedUrlDownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetPresignedUrlDownloadFile(ctx, req.(*FileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetPresignedUrlDownloadPartFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LargeFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetPresignedUrlDownloadPartFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetPresignedUrlDownloadPartFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetPresignedUrlDownloadPartFile(ctx, req.(*LargeFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetPresignedUrlUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetPresignedUrlUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetPresignedUrlUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetPresignedUrlUploadFile(ctx, req.(*FileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetPresignedUrlUploadLargeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LargeFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetPresignedUrlUploadLargeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/GetPresignedUrlUploadLargeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetPresignedUrlUploadLargeFile(ctx, req.(*LargeFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCompleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CompleteMultipartUpload(ctx, req.(*UploadCompleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCompleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediaService/AbortMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).AbortMultipartUpload(ctx, req.(*UploadCompleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeadFile",
			Handler:    _MediaService_GetHeadFile_Handler,
		},
		{
			MethodName: "GetObjectByRange",
			Handler:    _MediaService_GetObjectByRange_Handler,
		},
		{
			MethodName: "GetPresignedUrlDownloadFile",
			Handler:    _MediaService_GetPresignedUrlDownloadFile_Handler,
		},
		{
			MethodName: "GetPresignedUrlDownloadPartFile",
			Handler:    _MediaService_GetPresignedUrlDownloadPartFile_Handler,
		},
		{
			MethodName: "GetPresignedUrlUploadFile",
			Handler:    _MediaService_GetPresignedUrlUploadFile_Handler,
		},
		{
			MethodName: "GetPresignedUrlUploadLargeFile",
			Handler:    _MediaService_GetPresignedUrlUploadLargeFile_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _MediaService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _MediaService_AbortMultipartUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/media.proto",
}
